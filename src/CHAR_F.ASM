;*****************************************
;
;     모드 13h용 게임 작성 라이브러리
;                       Ver 4.2
;
;                 제작자:
;                        주 경 민
;
;  게임 작성을 위해 만든 라이브러리로서
; 모드 13h (320x200, 256) 전용이다.
;
;*****************************************
IDEAL
include "game13h.inc"


UDATASEG


DATASEG


CODESEG

;*******************************************
;  좌우로 반전해서 찍는다.(CHAR_PUT)
; void char_put_flip_hiriz( int x, int y, image_data image )
;*******************************************
proc char_put_flip_horiz  x:word, y:word, image:dword
  uses ds, es, si, di

  ; ah ... skip_color
  mov ah, [_attr_null_color]
  push ax

  ; es:di ... 그래픽 세그먼트, 오프셋 세트
  set_page es, [_page_number]
  calc_addr di, [x], [y]

  lds si, [image] ; si ... 이미지 배열의 시작점

  mov bx, [ds:si]    ; bx ... 이미지의 x 크기
  test bx, bx
  jz @@exit
  mov cx, [ds:si+2]  ; cx ... 이미지의 y 크기를 세트
  jcxz @@exit
  add si, 4

  mov dx, H_RES
  add dx, bx      ; ax ... 320 + x_size

  dec di
  add di, bx      ; move point left end

  pop ax          ; ah ... skip color

  ; state :
  ;   si ... 배열의 이미지 시작부분
  ;   es:di ... 화면상의 이미지 시작부분
  ;   ah ... skip color
  ;   bx ... x_size
  ;   cx ... y_size
  ;   dx ... carage (320 - x_size)

  cld

 @@y_loop:
  push cx
  mov cx, bx

 @@x_loop:
  lodsb
  cmp al, ah
  je @@skip
  mov [es:di], al
 @@skip:
  dec di
  loop @@x_loop

  add di, dx
  pop cx
  loop @@y_loop

 @@exit:
  ret
endp
global char_put_flip_horiz : proc


;*******************************************
;  상하로 반전해서 찍는다.(CHAR_PUT)
; void char_put_flip_vert( int x, int y, image_data image )
;*******************************************
proc char_put_flip_vert  x:word, y:word, image:dword
  uses ds, es, si, di

  ; ah ... skip_color
  mov ah, [_attr_null_color]
  push ax

  ; es:di ... 그래픽 세그먼트, 오프셋 세트
  set_page es, [_page_number]

  lds si, [image] ; si ... 이미지 배열의 시작점

  mov bx, [ds:si]    ; bx ... 이미지의 x 크기
  test bx, bx
  jz @@exit
  mov cx, [ds:si+2]  ; cx ... 이미지의 y 크기를 세트
  test cx, cx
  jz @@exit
  add si, 4

  mov ax, [y]
  add ax, cx
  dec ax
  calc_addr di, [x], ax

  mov dx, H_RES
  add dx, bx      ; dx ... 320 + x_size

  pop ax          ; ah ... skip color

  ; state :
  ;   si ... 배열의 이미지 시작부분
  ;   es:di ... 화면상의 이미지 시작부분
  ;   ah ... skip color
  ;   bx ... x_size
  ;   cx ... y_size
  ;   dx ... carage (320 - x_size)

  cld

 @@y_loop:
  push cx
  mov cx, bx

 @@x_loop:
  lodsb
  cmp al, ah
  je @@skip
  mov [es:di], al
 @@skip:
  inc di
  loop @@x_loop

  sub di, dx
  pop cx
  loop @@y_loop

 @@exit:
  ret
endp
global char_put_flip_vert : proc


;*******************************************
;  상하좌우로 반전해서 찍는다.(CHAR_PUT)
; void char_put_flip_both( int x, int y, image_data image )
;*******************************************
proc char_put_flip_both  x:word, y:word, image:dword
  uses ds, es, si, di

  ; ah ... skip_color
  mov ah, [_attr_null_color]
  push ax

  ; es:di ... 그래픽 세그먼트, 오프셋 세트
  set_page es, [_page_number]

  lds si, [image] ; si ... 이미지 배열의 시작점

  mov bx, [ds:si]    ; bx ... 이미지의 x 크기
  test bx, bx
  jz @@exit
  mov cx, [ds:si+2]  ; cx ... 이미지의 y 크기를 세트
  test cx, cx
  jz @@exit
  add si, 4

  mov ax, [y]
  add ax, cx
  dec ax
  calc_addr di, [x], ax

  mov dx, H_RES
  sub dx, bx      ; dx ... 320 - x_size

  dec di
  add di, bx   ; move point left end

  pop ax          ; ah ... skip color

  ; state :
  ;   si ... 배열의 이미지 시작부분
  ;   es:di ... 화면상의 이미지 시작부분
  ;   ah ... skip color
  ;   bx ... x_size
  ;   cx ... y_size
  ;   dx ... carage (320 - x_size)

  cld

 @@y_loop:
  push cx
  mov cx, bx

 @@x_loop:
  lodsb
  cmp al, ah
  je @@skip
  mov [es:di], al
 @@skip:
  dec di
  loop @@x_loop

  sub di, dx
  pop cx
  loop @@y_loop

 @@exit:
  ret
endp
global char_put_flip_both : proc


END
