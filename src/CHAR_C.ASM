;*****************************************
;
;     모드 13h용 게임 작성 라이브러리
;                       Ver 4.2
;
;                 제작자:
;                        주 경 민
;
;  게임 작성을 위해 만든 라이브러리로서
; 모드 13h (320x200, 256) 전용이다.
;
;*****************************************
IDEAL
include "game13h.inc"


UDATASEG


DATASEG


CODESEG

;***************************
;  char_put의 y클리핑 버전
; void char_put_clip_y( int x, int y, image_data image )
;***************************
proc char_put_clip_y  x:word, y:word, image:dword
  local temp_color:byte, temp:word
  uses ds, es, si, di

  mov ah, [_attr_null_color]   ; ah ... skip_color
  mov [temp_color], ah

  set_page es, [_page_number]  ; es ... 그래픽 세그먼트 세트
  lds si, [image]              ; bx ... 이미지 배열의 시작점

  mov bx, [ds:si]     ; bx ... 이미지의 x 크기
  test bx, bx
  jz @@exit
  mov cx, [ds:si+2]   ; cx ... 이미지의 y 크기를 세트
  jcxz @@exit
  add si, 4

  ; clipping y
  mov ax, [y]
  call _clipping_y
  jcxz @@exit

  calc_addr di, [x], ax  ; si ... 이미지 오프셧

  mov dx, H_RES
  sub dx, bx     ; dx ... 320 - x_size

  mov ah, [temp_color]

  ; state :
  ;   ds:si ... 배열의 이미지 시작부분
  ;   es:di ... 화면상의 이미지 시작부분
  ;   ah ... skip_color
  ;   bx ... x_size
  ;   cx ... y_size
  ;   dx ... carage (320 - x_size)

  cld

 @@y_loop:
  push cx
  mov cx, bx

 @@x_loop:
  lodsb
  cmp al, ah
  je @@skip
  stosb
  jmp @@next
 @@skip:
  inc di
 @@next:
  loop @@x_loop

  add di, dx
  pop cx
  loop @@y_loop

 @@exit:
  ret
endp
global char_put_clip_y : proc


;***************************
;  char_put의 x클리핑 버전
; void char_put_clip_x( int x, int y, image_data image )
;***************************
proc char_put_clip_x  x:word, y:word, image:dword
  local image_carage:word, temp_color:byte
  uses ds, es, si, di

  mov ah, [_attr_null_color]   ; ah ... skip_color
  mov [temp_color], ah

  set_page es, [_page_number]  ; es ... 그래픽 세그먼트 세트
  lds si, [image]              ; bx ... 이미지 배열의 시작점

  mov bx, [ds:si]     ; bx ... 이미지의 x 크기
  mov cx, [ds:si+2]   ; cx ... 이미지의 y 크기를 세트
  add si, 4
  mov [image_carage], bx

  calc_addr di, [x], [y]  ; di ... 그래픽 오프셧

  ; clipping x
  mov ax, [x]
  call _clipping_x
  test bx, bx
  jz @@exit

  mov dx, H_RES
  sub dx, bx         ; dx ... 320 - x_size

  sub [image_carage], bx   ; 이미지 배열의 캐리지값
  mov ah, [temp_color]

  ; state :
  ;   ds:si ... 배열의 이미지 시작부분
  ;   es:di ... 화면상의 이미지 시작부분
  ;   ah ... skip color
  ;   bx ... x_size
  ;   cx ... y_size
  ;   dx ... screen carage (320 - x_size)

  cld

 @@y_loop:
  push cx
  mov cx, bx

 @@x_loop:
  lodsb
  cmp al, ah
  je @@skip
  stosb
  jmp @@next
 @@skip:
  inc di
 @@next:
  loop @@x_loop

  add si, [image_carage]
  add di, dx
  pop cx
  loop @@y_loop

 @@exit:
  ret
endp
global char_put_clip_x : proc


;***************************
;  char_put의 x클리핑 버전
; void char_put_clip( int x, int y, image_data image )
;***************************
proc char_put_clip  x:word, y:word, image:dword
  local image_carage:word, temp_color:byte
  uses ds, es, si, di

  mov ah, [_attr_null_color]   ; ah ... skip_color
  mov [temp_color], ah

  set_page es, [_page_number]  ; es ... 그래픽 세그먼트 세트
  lds si, [image]              ; bx ... 이미지 배열의 시작점

  mov bx, [ds:si]     ; dx ... 이미지의 x 크기
  test bx, bx
  jz @@exit
  mov cx, [ds:si+2]   ; cx ... 이미지의 y 크기를 세트
  jcxz @@exit
  add si, 4
  mov [image_carage], bx

  ; clipping y
  mov ax, [y]
  call _clipping_y
  jcxz @@exit

  calc_addr di, [x], ax   ; di ... 그래픽 오프셧

  ; clipping x
  mov ax, [x]
  call _clipping_x
  test bx, bx
  jz @@exit

  mov dx, H_RES
  sub dx, bx         ; dx ... 320 - x_size

  sub [image_carage], bx   ; 이미지 배열의 캐리지값
  mov ah, [temp_color]

  ; state :
  ;   ds:si ... 배열의 이미지 시작부분
  ;   es:di ... 화면상의 이미지 시작부분
  ;   ah ... skip color
  ;   bx ... x_size
  ;   cx ... y_size
  ;   dx ... screen carage (320 - x_size)

  cld

 @@y_loop:
  push cx
  mov cx, bx

 @@x_loop:
  lodsb
  cmp al, ah
  je @@skip
  stosb
  jmp @@next
 @@skip:
  inc di
 @@next:
  loop @@x_loop

  add si, [image_carage]
  add di, dx
  pop cx
  loop @@y_loop

 @@exit:
  ret
endp
global char_put_clip : proc


END
